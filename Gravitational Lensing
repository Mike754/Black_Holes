#Imports
from mpl_toolkits import mplot3d
%matplotlib inline
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import numpy as np
import math as mat

#This was modified from Kushal Pokhrel's "Visualization of Black Holes and Gravitational Lensing Using Python and Plotly" 
# Origional code at : https://kushalpokhrel.medium.com/visualization-of-black-holes-and-gravitational-lensing-using-python-and-plotly-418ee5e48cfb

#Create a grid of points
size = 100
x = np.linspace(-2, 2, size)
y = np.linspace(-2, 2, size)
X, Y = np.meshgrid(x, y)

Rs = 1
D_S = 1
D_L = 1
D_LS = D_S+D_L

# Define the gravitational lensing effect
def gravitational_lens(x, y, mass=1):
    r = np.sqrt(x**2 + y**2)
    beta = np.arctan2(y, x)
    theta_E = np.sqrt(2 * Rs * (D_LS / (D_S * D_L))) 
   
    theta1 = 0.5 * (beta + np.sqrt(abs(beta**2 - 4 * theta_E**2)))
    theta2 = 0.5 * (beta - np.sqrt(abs(beta**2 - 4 * theta_E**2)))
    
    deflection = mass / r
    x1_new = x - deflection * np.cos(theta1)
    y1_new = y - deflection * np.sin(theta1)
    x2_new = x - deflection * np.cos(theta2)
    y2_new = y - deflection * np.sin(theta2)
    
    return x1_new, y1_new, x2_new, y2_new

#Apply gravitational lensing effect
X1_lens, Y1_lens, X2_lens, Y2_lens = gravitational_lens(X, Y)

#Create a figure
fig = go.Figure()

#Add the original grid as a scatter plot
fig.add_trace(go.Scatter(x=X.flatten(), y=Y.flatten(), mode='markers', marker=dict(color='blue', size=3)))

#Add a lensed grid as a scatter plot
fig.add_trace(go.Scatter(x=X1_lens.flatten(), y=Y1_lens.flatten(), mode='markers', marker=dict(color='red', size=3)))
fig.add_trace(go.Scatter(x=X2_lens.flatten(), y=Y2_lens.flatten(), mode='markers', marker=dict(color='orange', size=3)))

#Set layout
fig.update_layout(title='Gravitational Lensing Simulation', xaxis_title='X', yaxis_title='Y')

fig.update_layout(
    margin=dict(l=20, r=20, t=20, b=20),
    paper_bgcolor="LightSteelBlue",
)


#Show the plot
fig.show()
